# --------------------------------------REQUIREMENTS--------------------------------------
from flask import Flask, jsonify, request, abort, redirect, url_for, session
from flask_session import Session
from flask_dance.contrib.github import make_github_blueprint, github
import psycopg2
import sys
import os
import numpy as np
import pandas as pd
import credentials as creds
import pandas.io.sql as psql
import json
# --------------------------------------REQUIREMENTS--------------------------------------

"""
API important links explanation:
/session/create (POST)
-> Generate session number, return the session number to user
-> Need key value for lat, long ,transport_mode, speed, quality
-> Generates lat, long, preferences and others and stores it in the database
-> Only for OAuth authenticated users

/session/<session_id> (PUT)
-> Insert details for each particular user
-> Need key value for lat, long ,transport_mode, speed, quality

/session/<session_id> (GET)
-> Get all session details
-> Requires OAuth

/session/<session_id>/calculate (GET)
-> If OAuth is provided, run the calculation
-> Redirect to results page

/session/<session_id>/results (GET)
-> If OAuth is provided or IP address matches, show results

"""

app = Flask(__name__)

app.secret_key = 'super dsagbrjuyki64y5tg4fd key'


@app.route('/')
def index():
    data = session['data']
    json_details = json.dumps(data)
    return(data)


@app.route('/session/create', methods=['POST'])
def create_session():
    # Here we create the session

    # Get session details from OAUTH
    username = 'username'

    # Check that a session for the user does not already exist
    # crsr = conn.cursor()
    # crsr.execute("SELECT username FROM sessions WHERE username = (%s) LIMIT 1;",(username,))
    # exists = crsr.fetchone()
    # if exists != None:
    #     return jsonify({'warning':'session already exists'})

    # Extract the post json details
    content = request.get_json()

    # OAUTH REQUIRED HERE, ONLY REGISTERED USERS CAN MAKE SESSION

    # Check that the lat and Long are valid

    # After checks, allow the creation of a session
    # Generate Random Session ID:
    session_id = '123456'

    # Consolidate the session details
    host_user_details = {'username': username,
                         'lat': content.get('lat'),
                         'long': content.get('long'),
                         'transport_mode': content.get('transport_mode', 'public'),
                         'metrics': {
                             'speed': int(content.get('speed', 5)),
                             'quality': int(content.get('quality', 5))
                         }}

    session['data'] = {'users': [host_user_details]}
    json_details = json.dumps(session['data'])
    print(json_details)

    # Upload the user's details
    # crsr = conn.cursor()
    # crsr.execute("INSERT INTO sessions (session_id, username, info) VALUES (%s,%s,%s);",(session_id,username,json_details))
    # conn.commit()

    # Return the session id

    return jsonify({'session_id': session_id})


@app.route('/session/<session_id>', methods=['POST', 'GET'])
def manage_details(session_id):
    if request.method == 'POST':

        # Ensure that we have not yet received a message from this ip
        identifier = 'identifier'

        # Get the content of the PUT
        content = request.get_json()

        # Make sure the lat and long are provided and valid

        # Consolidate the session details
        new_user_details = {'identifier': identifier,
                            'lat': content.get('lat'),
                            'long': content.get('long'),
                            'transport_mode': content.get('transport_mode', 'public'),
                            'metrics': {
                                'speed': int(content.get('speed', 5)),
                                'quality': int(content.get('quality', 5))
                            }}

        # Get the current details of users
        # crsr = conn.cursor()
        # crsr.execute("SELECT info FROM sessions WHERE session_id = %s",(session_id,))
        # info = crsr.fetchone()
        # The result is a tuple where the first value is the result in dictionary form alreadys
        if session != {}:
            # info_dict = info[0]
            print(11111111111111111111111)
            print(session['data'])
            data = session['data']
            data['users'].append(new_user_details)
            session['data'] = data
            info = json.dumps(session['data'])
            print(22222222222222222222222222)
            print(session['data'])
            # Upload the updated info into the tables
            # crsr.execute("UPDATE sessions SET info=(%s) WHERE session_id = (%s)",(info,session_id))
            # conn.commit()
            return jsonify({'updated_info_for_session_id': session_id})
        else:
            return jsonify({'error': 'The specified session id does not yet exist'})

    elif request.method == 'GET':
        # Check the OAuth details

        # Extract the username
        username = 'username'

        # Get all the meetup details and return it to the user
        # crsr = conn.cursor()
        # crsr.execute("SELECT info FROM sessions WHERE session_id = %s and username = %s",(session_id,username))
        # info = crsr.fetchone()
        if session['data'] != {}:
            return jsonify(session['data'])
        else:
            return jsonify({'error': 'sesson_id or username is wrong'})


@app.route('/session/<session_id>/calculate', methods=['GET'])
def calculate(session_id):
    # Check the OAuth details

    # Extract the username
    username = 'username'

    # Get all the meetup details
    # crsr = conn.cursor()
    # crsr.execute("SELECT info FROM sessions WHERE session_id = %s and username = %s",(session_id,username))
    # info = crsr.fetchone()
    if session['data'] != None:
        

        return redirect("/session/"+session_id+"/results", code=302)
    else:
        return jsonify({'error': 'sesson_id or username is wrong'})


@app.route('/session/<session_id>/results', methods=['GET'])
def results(session_id):
    # Get the session results from PGSQL
    # crsr = conn.cursor()
    # crsr.execute(
    #     "SELECT results FROM sessions WHERE session_id=%s", (session_id,))
    # results = crsr.fetchone()
    # results = results[0]
    # Check if the user is authorised to see the data
    results_dict = {}
    results_dict['possible_locations'] = [
        'Philip\'s house', 'Tiong Bahru Plaza']
    results_dict['users'] = ['Julia', 'Stephen']
    for location in results_dict['possible_locations']:
        results_dict[location] = {}
    #     for user in results_dict['users']:
    results_dict['Philip\'s house']['Julia'] = {}
    results_dict['Philip\'s house']['Julia']['longtitude']=["103.93827","103.93828","103.93835","103.93943","103.93942","103.93908","103.93908","103.93908","103.93908","103.93877","103.93819","103.93819","103.93816","103.93814","103.93814","103.93814","103.93806","103.9369","103.93667","103.93662","103.93633","103.93542","103.93485","103.93466","103.93444","103.93419","103.9338","103.93329","103.93269","103.93262","103.93251","103.9324","103.93174","103.93133","103.93105","103.93068","103.93068","103.93049","103.93036","103.93033","103.93022","103.93014","103.9298","103.92914","103.92876","103.92845","103.92841","103.92804","103.92784","103.92742","103.92711","103.92643","103.92621","103.92621","103.92615","103.92593","103.92554","103.92535","103.92519","103.92512","103.92494","103.92474","103.9244","103.92414","103.9234","103.92317","103.92308","103.92214","103.92143","103.92009","103.9198","103.91946","103.91922","103.91895","103.91855","103.91786","103.91705","103.91687","103.91666","103.91647","103.9161","103.91595","103.91582","103.91529","103.91516","103.915","103.91477","103.9145","103.91418","103.91386","103.91352","103.91331","103.91313","103.91272","103.91104","103.91056","103.91006","103.90966","103.90927","103.90894","103.9086","103.90816","103.90772","103.90736","103.90699","103.90644","103.9057","103.90486","103.9047","103.90422","103.90316","103.90305","103.90256","103.90204","103.90153","103.90116","103.90058","103.90011","103.8997","103.8993","103.89827","103.89737","103.89547","103.8949","103.89455","103.89409","103.89364","103.89323","103.8928","103.89238","103.89209","103.89179","103.89122","103.88992","103.88952","103.88917","103.88878","103.88848","103.88739","103.88689","103.88638","103.88606","103.88589","103.88573","103.88543","103.88513","103.88486","103.88458","103.88426","103.8839","103.88354","103.88333","103.88265","103.88212","103.88175","103.88167","103.8816","103.88144","103.87992","103.87977","103.87971","103.8796","103.87924","103.87906","103.87885","103.87873","103.87848","103.87823","103.87802","103.87775","103.87753","103.87742","103.87734","103.87734","103.87736","103.87738","103.87744","103.87756","103.87757","103.87765","103.87767","103.87766","103.87764","103.87761","103.87758","103.87754","103.8775","103.87744","103.87743","103.87743","103.87739","103.87733","103.87717","103.87709","103.87696","103.87695","103.87672","103.87647","103.87612","103.87581","103.87559","103.87523","103.87481","103.87481","103.87469","103.87468","103.87468","103.87467","103.87465","103.87461","103.87447","103.87441","103.87433","103.87422","103.87415","103.87396","103.87391","103.87374","103.8736","103.87332","103.87315","103.8731","103.87302","103.87293","103.87281","103.87276","103.87264","103.87261","103.87259","103.87256","103.87258","103.87263","103.87263","103.87263","103.87267","103.87272","103.87277","103.87277","103.87281","103.8729","103.87297","103.87303","103.87308","103.87321","103.87336","103.87336","103.87343","103.87366","103.87375","103.87383","103.87385","103.87386","103.87388","103.87392","103.87394","103.87397","103.87398","103.87402","103.87402","103.87403","103.87403","103.87402","103.874","103.87394","103.8739","103.87381","103.87366","103.87356","103.87351","103.87348","103.87332","103.87326","103.87324","103.87324","103.87326","103.87331","103.87338","103.8735","103.87363","103.87363","103.87365","103.87365","103.87365","103.87363","103.87359","103.87346","103.8734","103.87322","103.87276","103.8726","103.87252","103.87248","103.87248","103.87233","103.87226","103.87182","103.87155","103.8714","103.87137","103.87124","103.87106","103.87092","103.87072","103.87069","103.87053","103.87038","103.8701","103.86985","103.86985","103.86978","103.8696","103.8696","103.86969","103.86969","103.86973","103.86973","103.86974","103.86974","103.86974"]
    results_dict['Philip\'s house']['Julia']['latitude']=["1.35651","1.3561","1.35604","1.35604","1.35729","1.35727","1.35727","1.35739","1.35739","1.35739","1.35739","1.35739","1.35692","1.35587","1.35587","1.35575","1.35574","1.35573","1.35573","1.35573","1.35573","1.35572","1.35573","1.35573","1.35575","1.35582","1.35602","1.35625","1.35654","1.35658","1.35664","1.3567","1.35706","1.35728","1.35743","1.35765","1.35765","1.35771","1.3577","1.3577","1.35766","1.35757","1.35695","1.35576","1.35508","1.35451","1.35444","1.35376","1.35339","1.35259","1.352","1.35072","1.35032","1.35032","1.35018","1.34984","1.34917","1.34891","1.3487","1.34863","1.34845","1.34828","1.34806","1.34792","1.34757","1.34745","1.34743","1.34705","1.34677","1.3462","1.34605","1.34586","1.34568","1.34548","1.34513","1.34454","1.34382","1.34363","1.34339","1.34314","1.34256","1.34228","1.34205","1.3411","1.34091","1.3407","1.34042","1.34013","1.33984","1.33958","1.33934","1.33921","1.33912","1.33891","1.33812","1.3379","1.33772","1.33761","1.33752","1.33748","1.33745","1.33745","1.33747","1.33751","1.33758","1.33769","1.33785","1.33804","1.33808","1.33819","1.33844","1.33846","1.33856","1.33864","1.33874","1.33882","1.339","1.33917","1.33934","1.33953","1.34008","1.34057","1.34158","1.34185","1.34204","1.34234","1.34269","1.34297","1.34317","1.34326","1.34328","1.34327","1.34314","1.34269","1.34255","1.34242","1.34227","1.34212","1.34152","1.34126","1.34105","1.34094","1.3409","1.34087","1.34082","1.34081","1.34081","1.34083","1.34087","1.34093","1.34103","1.34106","1.34138","1.34162","1.34182","1.34186","1.34189","1.34196","1.34269","1.34276","1.3428","1.34285","1.34304","1.34314","1.34327","1.34334","1.34349","1.34364","1.34382","1.34398","1.34409","1.34415","1.34417","1.34417","1.3443","1.34436","1.34453","1.34484","1.34492","1.34517","1.34541","1.34554","1.34572","1.3459","1.34608","1.34639","1.34677","1.34714","1.34721","1.34721","1.34729","1.34741","1.34753","1.34755","1.34758","1.34758","1.34757","1.34757","1.34757","1.34758","1.34758","1.34758","1.34757","1.34757","1.34757","1.34832","1.34853","1.34885","1.34894","1.34902","1.3492","1.34927","1.34935","1.34947","1.34956","1.34977","1.34983","1.35001","1.35023","1.35056","1.35076","1.35082","1.35092","1.35103","1.35117","1.35126","1.35153","1.35164","1.35173","1.35188","1.35222","1.35265","1.3527","1.35273","1.35297","1.35332","1.35361","1.35371","1.35391","1.35426","1.3546","1.35486","1.35499","1.35526","1.35556","1.35556","1.35569","1.35615","1.35638","1.35671","1.35684","1.35698","1.35712","1.35745","1.35765","1.3579","1.35802","1.35829","1.35829","1.35841","1.35849","1.35856","1.3587","1.35901","1.35929","1.35965","1.36033","1.36079","1.36097","1.36114","1.3618","1.36201","1.36223","1.36233","1.36263","1.36277","1.36292","1.36313","1.36336","1.36336","1.3635","1.36365","1.36371","1.36376","1.36382","1.36391","1.36399","1.3641","1.36446","1.36457","1.36462","1.3647","1.3647","1.36465","1.36466","1.3649","1.36507","1.36536","1.36543","1.36568","1.36605","1.36636","1.36689","1.36696","1.36731","1.36766","1.36833","1.36915","1.36915","1.36912","1.36893","1.36893","1.36886","1.36861","1.36835","1.36782","1.36775","1.3675","1.3675"]
    results_dict['Philip\'s house']['Julia']['total_cost'] = '100'
    results_dict['Philip\'s house']['Julia']['end_vid'] = '3843212'
    results_dict['Philip\'s house']['Julia']['start_user'] = '43891032'
    results_dict['Philip\'s house']['Julia']['start_user_name'] = 'Julia'

    results_dict['Philip\'s house']['Stephen'] = {}
    results_dict['Philip\'s house']['Stephen']['longtitude']=["103.81685", "103.81663","103.81657","103.8164","103.8164","103.81649","103.81681","103.81694","103.81707","103.81714","103.81736","103.81741","103.81747","103.81753","103.81757","103.81774","103.81788","103.81791","103.81807","103.81812","103.81814","103.81819","103.81822","103.81824","103.81825","103.81822","103.8182","103.8182","103.81821","103.81821","103.81834","103.8188","103.81946","103.81961","103.81977","103.82015","103.82019","103.82032","103.82037","103.82085","103.82103","103.82147","103.82184","103.82202","103.82273","103.82306","103.82331","103.82373","103.82379","103.82395","103.82405","103.82473","103.82499","103.82516","103.82592","103.82632","103.82638","103.8273","103.82753","103.82763","103.82795","103.82818","103.82852","103.8286","103.8286","103.82866","103.82874","103.82884","103.82892","103.82899","103.82908","103.82917","103.82982","103.83031","103.83071","103.83071","103.83116","103.83134","103.83168","103.83211","103.83256","103.83329","103.83339","103.83455","103.83522","103.83552","103.83584","103.83609","103.83628","103.83645","103.8366","103.83683","103.83705","103.83728","103.83747","103.83761","103.83777","103.83795","103.83811","103.83827","103.83853","103.83893","103.83929","103.83973","103.83994","103.84006","103.84031","103.84048","103.84058","103.84071","103.84081","103.84102","103.84167","103.84214","103.84217","103.84261","103.84263","103.84348","103.84391","103.84403","103.84416","103.84426","103.84427","103.84421","103.84406","103.84397","103.84342","103.84328","103.84335","103.84346","103.84337","103.84326","103.84314","103.84298","103.84269","103.84256","103.84189","103.84096","103.8407","103.84052","103.84026","103.8401","103.83999","103.83997","103.83999","103.84005","103.8401","103.84023","103.84039","103.84056","103.8411","103.84143","103.84181","103.84275","103.843","103.84346","103.84376","103.84396","103.84425","103.8444","103.84455","103.84463","103.84484","103.84498","103.845","103.84521","103.84542","103.84566","103.84594","103.84624","103.84661","103.84691","103.84724","103.84748","103.84772","103.84828","103.85015","103.85181","103.85244","103.85265","103.85321","103.85367","103.85411","103.85463","103.85516","103.85552","103.85592","103.85626","103.85633","103.85714","103.85756","103.85781","103.85802","103.85806","103.85839","103.85883","103.85954","103.85984","103.86057","103.86076","103.86119","103.86153","103.86178","103.86186","103.86212","103.86222","103.86225","103.86227","103.86227","103.86227","103.86224","103.86221","103.8622","103.86214","103.86212","103.8621","103.86207","103.86207","103.86205","103.86202","103.86198","103.86197","103.86195","103.86186","103.86178","103.86168","103.8615","103.86143","103.86113","103.86076","103.86035","103.86031","103.85991","103.85958","103.85913","103.85875","103.8578","103.85777","103.85763","103.85755","103.85711","103.85692","103.85676","103.85679","103.85689","103.85695","103.85703","103.85725","103.85732","103.85742","103.85785","103.85816","103.85877","103.85902","103.8594","103.85966","103.85996","103.85996","103.85996","103.85997","103.86","103.86011","103.86033","103.86043","103.86046","103.86045","103.86045","103.86045","103.86045","103.86046","103.86046","103.86043","103.86129","103.86176","103.86278","103.8631","103.86343","103.86365","103.86388","103.86399","103.86415","103.86431","103.86467","103.86481","103.86494","103.86503","103.86526","103.86578","103.86607","103.86654","103.86675","103.86702","103.86771","103.86822","103.8685","103.86879","103.86928","103.86949","103.86969","103.86972","103.8698","103.87016","103.87021","103.87062","103.87095","103.87123","103.87166","103.87166","103.87173","103.8717","103.87163","103.87163","103.87164","103.87164","103.87166","103.87171","103.87171","103.87164","103.87148","103.87118","103.87067","103.86974","103.86974","103.86978","103.86978","103.86982","103.86983","103.86983","103.86985","103.86985","103.86978","103.8696","103.8696","103.86969","103.86969","103.86973","103.86973","103.86974","103.86974","103.86973","103.86971","103.86957","103.86953","103.86953"]
    results_dict['Philip\'s house']['Stephen']['latitude']=["1.2853","1.28535","1.28537","1.28541","1.28541","1.28564","1.28633","1.2865","1.28667","1.28676","1.28705","1.28709","1.28712","1.28713","1.28712","1.28708","1.28704","1.28703","1.28696","1.28689","1.28681","1.28641","1.28615","1.28593","1.28571","1.28524","1.28494","1.28461","1.284","1.284","1.28397","1.28385","1.28368","1.28363","1.28358","1.28345","1.28344","1.28339","1.28337","1.28318","1.28311","1.28294","1.28279","1.2827","1.28241","1.28228","1.28216","1.28199","1.28196","1.2819","1.28186","1.28155","1.28142","1.28134","1.28094","1.28072","1.28069","1.28021","1.28008","1.28003","1.27985","1.27972","1.27953","1.27949","1.27949","1.27947","1.27947","1.27948","1.2795","1.27954","1.27964","1.27974","1.28026","1.28065","1.28092","1.28092","1.28124","1.28136","1.28157","1.28182","1.28205","1.28233","1.28237","1.28278","1.28302","1.28314","1.28329","1.28342","1.28361","1.28378","1.28396","1.28429","1.28463","1.28502","1.2853","1.28548","1.28565","1.28581","1.28592","1.28604","1.28622","1.28646","1.28668","1.28695","1.28708","1.28716","1.28734","1.28746","1.28754","1.28766","1.28775","1.28796","1.28874","1.2895","1.28955","1.29042","1.29045","1.292","1.29288","1.2931","1.29342","1.29385","1.29437","1.29498","1.29557","1.29595","1.29706","1.29775","1.29838","1.29936","1.30013","1.30063","1.3009","1.30114","1.30147","1.30159","1.30213","1.30292","1.30319","1.30346","1.3039","1.30434","1.30485","1.30525","1.30555","1.3059","1.30611","1.30646","1.30678","1.30707","1.30772","1.30803","1.30829","1.30893","1.30912","1.30958","1.30988","1.31014","1.31064","1.31099","1.31144","1.31174","1.31279","1.31339","1.31346","1.31394","1.31435","1.31475","1.31514","1.31551","1.31592","1.31625","1.31654","1.31671","1.31689","1.31722","1.31805","1.31876","1.31904","1.31915","1.31943","1.31967","1.31994","1.32029","1.32066","1.32096","1.32133","1.32169","1.32177","1.32271","1.32323","1.3235","1.32375","1.32379","1.32408","1.32449","1.32515","1.32542","1.32609","1.32627","1.32676","1.32726","1.32775","1.32795","1.32873","1.32913","1.32928","1.32945","1.32982","1.33139","1.33222","1.33269","1.33306","1.33419","1.33444","1.33501","1.33553","1.33675","1.33744","1.3378","1.33802","1.33816","1.33841","1.33893","1.33927","1.33959","1.34008","1.34028","1.34114","1.34223","1.34336","1.34348","1.34458","1.34549","1.3466","1.34769","1.35037","1.35048","1.35085","1.35106","1.35253","1.35337","1.35498","1.35587","1.35655","1.35687","1.35718","1.35786","1.35808","1.35844","1.3596","1.36041","1.36214","1.36283","1.36393","1.36471","1.36555","1.36555","1.36569","1.36574","1.36583","1.36619","1.36698","1.36729","1.36762","1.3679","1.3679","1.36851","1.36904","1.36921","1.36921","1.36942","1.36964","1.36976","1.37007","1.37016","1.37027","1.37035","1.37043","1.37047","1.37052","1.37057","1.37069","1.37076","1.37083","1.37088","1.37103","1.37138","1.37155","1.37176","1.37182","1.37188","1.37195","1.37197","1.37195","1.37193","1.37185","1.37182","1.37177","1.37177","1.37175","1.37166","1.37165","1.37154","1.37146","1.37139","1.37129","1.37129","1.37127","1.37109","1.37065","1.37044","1.37004","1.37","1.36993","1.36978","1.36978","1.36975","1.36969","1.36968","1.36968","1.36967","1.36967","1.36945","1.36943","1.36926","1.36922","1.36919","1.36915","1.36915","1.36912","1.36893","1.36893","1.36886","1.36861","1.36835","1.36782","1.36775","1.36732","1.36717","1.36713","1.36698","1.36694","1.36694"]
    results_dict['Philip\'s house']['Stephen']['total_cost'] = '120'
    results_dict['Philip\'s house']['Stephen']['end_vid'] = '1433212'
    results_dict['Philip\'s house']['Stephen']['start_user'] = '438932032'
    results_dict['Philip\'s house']['Stephen']['start_user_name'] = 'Stephen'

    results_dict['Tiong Bahru Plaza']['Julia'] = {}
    results_dict['Tiong Bahru Plaza']['Julia']['longtitude']=["104.93827","104.93828","104.93835","104.93943","104.93942","104.93908","104.93908","104.93908","104.93908","104.93877","104.93819","104.93819","104.93816","104.93814","104.93814","104.93814","104.93806","104.9369","104.93667","104.93662","104.93633","104.93542","104.93485","104.93466","104.93444","104.93419","104.9338","104.93329","104.93269","104.93262","104.93251","104.9324","104.93174","104.93133","104.93105","104.93068","104.93068","104.93049","104.93036","104.93033","104.93022","104.93014","104.9298","104.92914","104.92876","104.92845","104.92841","104.92804","104.92784","104.92742","104.92711","104.92643","104.92621","104.92621","104.92615","104.92593","104.92554","104.92535","104.92519","104.92512","104.92494","104.92474","104.9244","104.92414","104.9234","104.92317","104.92308","104.92214","104.92143","104.92009","104.9198","104.91946","104.91922","104.91895","104.91855","104.91786","104.91705","104.91687","104.91666","104.91647","104.9161","104.91595","104.91582","104.91529","104.91516","104.915","104.91477","104.9145","104.91418","104.91386","104.91352","104.91331","104.91313","104.91272","104.91104","104.91056","104.91006","104.90966","104.90927","104.90894","104.9086","104.90816","104.90772","104.90736","104.90699","104.90644","104.9057","104.90486","104.9047","104.90422","104.90316","104.90305","104.90256","104.90204","104.90153","104.90116","104.90058","104.90011","104.8997","104.8993","104.89827","104.89737","104.89547","104.8949","104.89455","104.89409","104.89364","104.89323","104.8928","104.89238","104.89209","104.89179","104.89122","104.88992","104.88952","104.88917","104.88878","104.88848","104.88739","104.88689","104.88638","104.88606","104.88589","104.88573","104.88543","104.88513","104.88486","104.88458","104.88426","104.8839","104.88354","104.88333","104.88265","104.88212","104.88175","104.88167","104.8816","104.88144","104.87992","104.87977","104.87971","104.8796","104.87924","104.87906","104.87885","104.87873","104.87848","104.87823","104.87802","104.87775","104.87753","104.87742","104.87734","104.87734","104.87736","104.87738","104.87744","104.87756","104.87757","104.87765","104.87767","104.87766","104.87764","104.87761","104.87758","104.87754","104.8775","104.87744","104.87743","104.87743","104.87739","104.87733","104.87717","104.87709","104.87696","104.87695","104.87672","104.87647","104.87612","104.87581","104.87559","104.87523","104.87481","104.87481","104.87469","104.87468","104.87468","104.87467","104.87465","104.87461","104.87447","104.87441","104.87433","104.87422","104.87415","104.87396","104.87391","104.87374","104.8736","104.87332","104.87315","104.8731","104.87302","104.87293","104.87281","104.87276","104.87264","104.87261","104.87259","104.87256","104.87258","104.87263","104.87263","104.87263","104.87267","104.87272","104.87277","104.87277","104.87281","104.8729","104.87297","104.87303","104.87308","104.87321","104.87336","104.87336","104.87343","104.87366","104.87375","104.87383","104.87385","104.87386","104.87388","104.87392","104.87394","104.87397","104.87398","104.87402","104.87402","104.87403","104.87403","104.87402","104.874","104.87394","104.8739","104.87381","104.87366","104.87356","104.87351","104.87348","104.87332","104.87326","104.87324","104.87324","104.87326","104.87331","104.87338","104.8735","104.87363","104.87363","104.87365","104.87365","104.87365","104.87363","104.87359","104.87346","104.8734","104.87322","104.87276","104.8726","104.87252","104.87248","104.87248","104.87233","104.87226","104.87182","104.87155","104.8714","104.87137","104.87124","104.87106","104.87092","104.87072","104.87069","104.87053","104.87038","104.8701","104.86985","104.86985","104.86978","104.8696","104.8696","104.86969","104.86969","104.86973","104.86973","104.86974","104.86974","104.86974"]
    results_dict['Tiong Bahru Plaza']['Julia']['latitude']=["1.35651","1.3561","1.35604","1.35604","1.35729","1.35727","1.35727","1.35739","1.35739","1.35739","1.35739","1.35739","1.35692","1.35587","1.35587","1.35575","1.35574","1.35573","1.35573","1.35573","1.35573","1.35572","1.35573","1.35573","1.35575","1.35582","1.35602","1.35625","1.35654","1.35658","1.35664","1.3567","1.35706","1.35728","1.35743","1.35765","1.35765","1.35771","1.3577","1.3577","1.35766","1.35757","1.35695","1.35576","1.35508","1.35451","1.35444","1.35376","1.35339","1.35259","1.352","1.35072","1.35032","1.35032","1.35018","1.34984","1.34917","1.34891","1.3487","1.34863","1.34845","1.34828","1.34806","1.34792","1.34757","1.34745","1.34743","1.34705","1.34677","1.3462","1.34605","1.34586","1.34568","1.34548","1.34513","1.34454","1.34382","1.34363","1.34339","1.34314","1.34256","1.34228","1.34205","1.3411","1.34091","1.3407","1.34042","1.34013","1.33984","1.33958","1.33934","1.33921","1.33912","1.33891","1.33812","1.3379","1.33772","1.33761","1.33752","1.33748","1.33745","1.33745","1.33747","1.33751","1.33758","1.33769","1.33785","1.33804","1.33808","1.33819","1.33844","1.33846","1.33856","1.33864","1.33874","1.33882","1.339","1.33917","1.33934","1.33953","1.34008","1.34057","1.34158","1.34185","1.34204","1.34234","1.34269","1.34297","1.34317","1.34326","1.34328","1.34327","1.34314","1.34269","1.34255","1.34242","1.34227","1.34212","1.34152","1.34126","1.34105","1.34094","1.3409","1.34087","1.34082","1.34081","1.34081","1.34083","1.34087","1.34093","1.34104","1.34106","1.34138","1.34162","1.34182","1.34186","1.34189","1.34196","1.34269","1.34276","1.3428","1.34285","1.34304","1.34314","1.34327","1.34334","1.34349","1.34364","1.34382","1.34398","1.34409","1.34415","1.34417","1.34417","1.3443","1.34436","1.34453","1.34484","1.34492","1.34517","1.34541","1.34554","1.34572","1.3459","1.34608","1.34639","1.34677","1.34714","1.34721","1.34721","1.34729","1.34741","1.34753","1.34755","1.34758","1.34758","1.34757","1.34757","1.34757","1.34758","1.34758","1.34758","1.34757","1.34757","1.34757","1.34832","1.34853","1.34885","1.34894","1.34902","1.3492","1.34927","1.34935","1.34947","1.34956","1.34977","1.34983","1.35001","1.35023","1.35056","1.35076","1.35082","1.35092","1.35104","1.35117","1.35126","1.35153","1.35164","1.35173","1.35188","1.35222","1.35265","1.3527","1.35273","1.35297","1.35332","1.35361","1.35371","1.35391","1.35426","1.3546","1.35486","1.35499","1.35526","1.35556","1.35556","1.35569","1.35615","1.35638","1.35671","1.35684","1.35698","1.35712","1.35745","1.35765","1.3579","1.35802","1.35829","1.35829","1.35841","1.35849","1.35856","1.3587","1.35901","1.35929","1.35965","1.36033","1.36079","1.36097","1.36114","1.3618","1.36201","1.36223","1.36233","1.36263","1.36277","1.36292","1.36313","1.36336","1.36336","1.3635","1.36365","1.36371","1.36376","1.36382","1.36391","1.36399","1.3641","1.36446","1.36457","1.36462","1.3647","1.3647","1.36465","1.36466","1.3649","1.36507","1.36536","1.36543","1.36568","1.36605","1.36636","1.36689","1.36696","1.36731","1.36766","1.36833","1.36915","1.36915","1.36912","1.36893","1.36893","1.36886","1.36861","1.36835","1.36782","1.36775","1.3675","1.3675"]
    results_dict['Tiong Bahru Plaza']['Julia']['total_cost'] = '15'
    results_dict['Tiong Bahru Plaza']['Julia']['end_vid'] = '14212'
    results_dict['Tiong Bahru Plaza']['Julia']['start_user'] = '1591042'
    results_dict['Tiong Bahru Plaza']['Julia']['start_user_name'] = 'Julia'

    results_dict['Tiong Bahru Plaza']['Stephen'] = {}
    results_dict['Tiong Bahru Plaza']['Stephen']['longtitude']=["104.81685", "104.81663","104.81657","104.8164","104.8164","104.81649","104.81681","104.81694","104.81707","104.81714","104.81736","104.81741","104.81747","104.81753","104.81757","104.81774","104.81788","104.81791","104.81807","104.81812","104.81814","104.81819","104.81822","104.81824","104.81825","104.81822","104.8182","104.8182","104.81821","104.81821","104.81834","104.8188","104.81946","104.81961","104.81977","104.82015","104.82019","104.82032","104.82037","104.82085","104.82104","104.82147","104.82184","104.82202","104.82273","104.82306","104.82331","104.82373","104.82379","104.82395","104.82405","104.82473","104.82499","104.82516","104.82592","104.82632","104.82638","104.8273","104.82753","104.82763","104.82795","104.82818","104.82852","104.8286","104.8286","104.82866","104.82874","104.82884","104.82892","104.82899","104.82908","104.82917","104.82982","104.83031","104.83071","104.83071","104.83116","104.83134","104.83168","104.83211","104.83256","104.83329","104.83339","104.83455","104.83522","104.83552","104.83584","104.83609","104.83628","104.83645","104.8366","104.83683","104.83705","104.83728","104.83747","104.83761","104.83777","104.83795","104.83811","104.83827","104.83853","104.83893","104.83929","104.83973","104.83994","104.84006","104.84031","104.84048","104.84058","104.84071","104.84081","104.84102","104.84167","104.84214","104.84217","104.84261","104.84263","104.84348","104.84391","104.84403","104.84416","104.84426","104.84427","104.84421","104.84406","104.84397","104.84342","104.84328","104.84335","104.84346","104.84337","104.84326","104.84314","104.84298","104.84269","104.84256","104.84189","104.84096","104.8407","104.84052","104.84026","104.8401","104.83999","104.83997","104.83999","104.84005","104.8401","104.84023","104.84039","104.84056","104.8411","104.84143","104.84181","104.84275","104.843","104.84346","104.84376","104.84396","104.84425","104.8444","104.84455","104.84463","104.84484","104.84498","104.845","104.84521","104.84542","104.84566","104.84594","104.84624","104.84661","104.84691","104.84724","104.84748","104.84772","104.84828","104.85015","104.85181","104.85244","104.85265","104.85321","104.85367","104.85411","104.85463","104.85516","104.85552","104.85592","104.85626","104.85633","104.85714","104.85756","104.85781","104.85802","104.85806","104.85839","104.85883","104.85954","104.85984","104.86057","104.86076","104.86119","104.86153","104.86178","104.86186","104.86212","104.86222","104.86225","104.86227","104.86227","104.86227","104.86224","104.86221","104.8622","104.86214","104.86212","104.8621","104.86207","104.86207","104.86205","104.86202","104.86198","104.86197","104.86195","104.86186","104.86178","104.86168","104.8615","104.86143","104.86113","104.86076","104.86035","104.86031","104.85991","104.85958","104.85913","104.85875","104.8578","104.85777","104.85763","104.85755","104.85711","104.85692","104.85676","104.85679","104.85689","104.85695","104.85703","104.85725","104.85732","104.85742","104.85785","104.85816","104.85877","104.85902","104.8594","104.85966","104.85996","104.85996","104.85996","104.85997","104.86","104.86011","104.86033","104.86043","104.86046","104.86045","104.86045","104.86045","104.86045","104.86046","104.86046","104.86043","104.86129","104.86176","104.86278","104.8631","104.86343","104.86365","104.86388","104.86399","104.86415","104.86431","104.86467","104.86481","104.86494","104.86503","104.86526","104.86578","104.86607","104.86654","104.86675","104.86702","104.86771","104.86822","104.8685","104.86879","104.86928","104.86949","104.86969","104.86972","104.8698","104.87016","104.87021","104.87062","104.87095","104.87123","104.87166","104.87166","104.87173","104.8717","104.87163","104.87163","104.87164","104.87164","104.87166","104.87171","104.87171","104.87164","104.87148","104.87118","104.87067","104.86974","104.86974","104.86978","104.86978","104.86982","104.86983","104.86983","104.86985","104.86985","104.86978","104.8696","104.8696","104.86969","104.86969","104.86973","104.86973","104.86974","104.86974","104.86973","104.86971","104.86957","104.86953","104.86953"]
    results_dict['Tiong Bahru Plaza']['Stephen']['latitude']=["1.2853","1.28535","1.28537","1.28541","1.28541","1.28564","1.28633","1.2865","1.28667","1.28676","1.28705","1.28709","1.28712","1.28713","1.28712","1.28708","1.28704","1.28703","1.28696","1.28689","1.28681","1.28641","1.28615","1.28593","1.28571","1.28524","1.28494","1.28461","1.284","1.284","1.28397","1.28385","1.28368","1.28363","1.28358","1.28345","1.28344","1.28339","1.28337","1.28318","1.28311","1.28294","1.28279","1.2827","1.28241","1.28228","1.28216","1.28199","1.28196","1.2819","1.28186","1.28155","1.28142","1.28134","1.28094","1.28072","1.28069","1.28021","1.28008","1.28003","1.27985","1.27972","1.27953","1.27949","1.27949","1.27947","1.27947","1.27948","1.2795","1.27954","1.27964","1.27974","1.28026","1.28065","1.28092","1.28092","1.28124","1.28136","1.28157","1.28182","1.28205","1.28233","1.28237","1.28278","1.28302","1.28314","1.28329","1.28342","1.28361","1.28378","1.28396","1.28429","1.28463","1.28502","1.2853","1.28548","1.28565","1.28581","1.28592","1.28604","1.28622","1.28646","1.28668","1.28695","1.28708","1.28716","1.28734","1.28746","1.28754","1.28766","1.28775","1.28796","1.28874","1.2895","1.28955","1.29042","1.29045","1.292","1.29288","1.2931","1.29342","1.29385","1.29437","1.29498","1.29557","1.29595","1.29706","1.29775","1.29838","1.29936","1.30013","1.30063","1.3009","1.30114","1.30147","1.30159","1.30213","1.30292","1.30319","1.30346","1.3039","1.30434","1.30485","1.30525","1.30555","1.3059","1.30611","1.30646","1.30678","1.30707","1.30772","1.30803","1.30829","1.30893","1.30912","1.30958","1.30988","1.31014","1.31064","1.31099","1.31144","1.31174","1.31279","1.31339","1.31346","1.31394","1.31435","1.31475","1.31514","1.31551","1.31592","1.31625","1.31654","1.31671","1.31689","1.31722","1.31805","1.31876","1.31904","1.31915","1.31943","1.31967","1.31994","1.32029","1.32066","1.32096","1.32133","1.32169","1.32177","1.32271","1.32323","1.3235","1.32375","1.32379","1.32408","1.32449","1.32515","1.32542","1.32609","1.32627","1.32676","1.32726","1.32775","1.32795","1.32873","1.32913","1.32928","1.32945","1.32982","1.33139","1.33222","1.33269","1.33306","1.33419","1.33444","1.33501","1.33553","1.33675","1.33744","1.3378","1.33802","1.33816","1.33841","1.33893","1.33927","1.33959","1.34008","1.34028","1.34114","1.34223","1.34336","1.34348","1.34458","1.34549","1.3466","1.34769","1.35037","1.35048","1.35085","1.35106","1.35253","1.35337","1.35498","1.35587","1.35655","1.35687","1.35718","1.35786","1.35808","1.35844","1.3596","1.36041","1.36214","1.36283","1.36393","1.36471","1.36555","1.36555","1.36569","1.36574","1.36583","1.36619","1.36698","1.36729","1.36762","1.3679","1.3679","1.36851","1.36904","1.36921","1.36921","1.36942","1.36964","1.36976","1.37007","1.37016","1.37027","1.37035","1.37043","1.37047","1.37052","1.37057","1.37069","1.37076","1.37083","1.37088","1.37104","1.37138","1.37155","1.37176","1.37182","1.37188","1.37195","1.37197","1.37195","1.37193","1.37185","1.37182","1.37177","1.37177","1.37175","1.37166","1.37165","1.37154","1.37146","1.37139","1.37129","1.37129","1.37127","1.37109","1.37065","1.37044","1.37004","1.37","1.36993","1.36978","1.36978","1.36975","1.36969","1.36968","1.36968","1.36967","1.36967","1.36945","1.36943","1.36926","1.36922","1.36919","1.36915","1.36915","1.36912","1.36893","1.36893","1.36886","1.36861","1.36835","1.36782","1.36775","1.36732","1.36717","1.36713","1.36698","1.36694","1.36694"]
    results_dict['Tiong Bahru Plaza']['Stephen']['total_cost'] = '6430'
    results_dict['Tiong Bahru Plaza']['Stephen']['end_vid'] = '263212'
    results_dict['Tiong Bahru Plaza']['Stephen']['start_user'] = '9432032'
    results_dict['Tiong Bahru Plaza']['Stephen']['start_user_name'] = 'Stephen'

    # return the results
    return jsonify(results_dict)


if __name__ == '__main__':

    # --------------------------------------CONNECT TO DATABASE-------------------------------
    # Set up a connection to the postgres server.
    # print("Connecting to the postgres server")
    # conn_string = "host="+ creds.PGHOST +" port="+ "5432" +" dbname="+ creds.PGDATABASE +" user=" + creds.PGUSER \
    # +" password="+ creds.PGPASSWORD
    # conn=psycopg2.connect(conn_string)
    # print("Connected!")
    # crsr = conn.cursor()
    # --------------------------------------CONNECT TO DATABASE-------------------------------

    # Check if the database exists. If not, create it
    # current_tables = pd.read_sql("SELECT * FROM information_schema.tables",conn)
    # exists = False
    # for name in current_tables['table_name']:
    #     if name == 'sessions':
    #         exists = True
    # if not exists:
    #     print('sessions do not exist, creating sessions table')
    #     crsr.execute('CREATE TABLE sessions (id SERIAL, session_id CHARACTER(255), username CHARACTER(255), info JSONB, results JSONB, PRIMARY KEY(id));')
    #     conn.commit()
    #     print('Done')
    # else:
    #     print('table "sessions" already exist, moving on')

    # Create a dictionary for the fake session details

    # Run the App
    app.run(host='0.0.0.0', debug=True, use_reloader=False)

    app.config['SESSION_TYPE'] = 'filesystem'
    app.config['PERMANANT_SESSION_LIFETIME'] = True
    app.config.from_object(__name__)
    Session(app)
    # crsr.close()
